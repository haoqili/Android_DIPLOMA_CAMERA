1335386048930: *** Opened log file for writing ***
1335386048930: Android build: SAMSUNG-SGH-I717
1335386048931: NET_NAME set to: eth0
1335386048931: starting Mux with id = -1
1335386048932: areButtonsEnabled --> true
1335386048935: *** Application started ***
1335386048936: HI I'm in ONRESUME()
1335386048939: SAMPLING_DISTANCE : 1, SAMPLING_DURATION : 1000
1335386048932: mux: Mux.java run() beginning -------------
1335386048937: mux: Mux.java's nodeId is5003
1335386048937: mux: starting vncDaemon ........
1335386048939: mux: vncDaemon started
1335386048938: Started VCoreDaemon with parameters maxRx = 5 , maxRY= 1
1335386048940: VCoreDaemon.java onStart() ....
1335386048940: started, mId = 5003
1335386048940: VCoreDaemon.java inside stateTransition ..........
1335386048941: removing leaderRequestRetryR because I'm doing a stateTransition
1335386048941: ..... VCoreDaemon.java out of bounds
1335386048942: region (-1, -1) out of bounds, dormant
1335386048942: ..... VCoreDaemon.java stateTransition ends xxxxxxxxxxxx
1335386053337: .......... GPS onLocationChanged ...... 
1335386053340: Loc = Location[mProvider=gps,mTime=1335386054000,mLatitude=42.35799285,mLongitude=-71.09304499,mHasAltitude=true,mAltitude=-20.799999237060547,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=27.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (-1,-1)
1335386053341: GPS x/long:-71.09304499, GPS y/lat: 42.35799285. Region width in x: 20.0
1335386053342: location PINPOINTS to region = 1.0, previous -1
1335386053342: Hysteresis is 0.0
1335386053342: location CHANGED TO NEW region = (1,0) from region = (-1,-1)
1335386053343: moving from region (-1,-1), to (1,0)
1335386053344: VCoreDaemon.java inside stateTransition ..........
1335386053344: removing leaderRequestRetryR because I'm doing a stateTransition
1335386053345: ..... VCoreDaemon.java targetState = JOINING
1335386053345: posting leaderRequestRetryR because I'm joining
1335386053345: sending LEADER_REQUEST
1335386053345: inside sendPacket(Packet p)
1335386053346: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386053372: ..... VCoreDaemon.java stateTransition ends xxxxxxxxxxxx
1335386053387: Sending UDP payload: 446
1335386053646: sending LEADER_REQUEST
1335386053646: inside sendPacket(Packet p)
1335386053646: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386053648: Sending UDP payload: 446
1335386053946: sending LEADER_REQUEST
1335386053947: inside sendPacket(Packet p)
1335386053947: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386053949: Sending UDP payload: 446
1335386054247: sending LEADER_REQUEST
1335386054248: inside sendPacket(Packet p)
1335386054248: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386054254: Sending UDP payload: 446
1335386054352: .......... GPS onLocationChanged ...... 
1335386054353: Loc = Location[mProvider=gps,mTime=1335386055000,mLatitude=42.35800288,mLongitude=-71.09304182,mHasAltitude=true,mAltitude=-21.0,mHasSpeed=true,mSpeed=0.25,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=20.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386054353: GPS x/long:-71.09304182, GPS y/lat: 42.35800288. Region width in x: 20.0
1335386054353: location PINPOINTS to region = 1.0, previous 1
1335386054353: Hysteresis is 0.0
1335386054353: stay at region 1
1335386054368: inside leaderRequestTimeoutR beacuse I didn't hear a leader_reply and I'm removing leaderRequestRetryR because leader_request timed out
1335386054368: inside leaderRequestTimeoutR and my state was JOINING, so I'll try to stateTransition to LEADER
1335386054368: VCoreDaemon.java inside stateTransition ..........
1335386054368: removing leaderRequestRetryR because I'm doing a stateTransition
1335386054369: ..... VCoreDaemon.java targetState = LEADER
1335386054369: trying to take leadership to the cloud
1335386054962: cloud accepted leadership request, no csm data included.
1335386054975: ..... VCoreDaemon.java targetState = LEADER and create new DSMLayer !!!! :D:D:D:D:D
1335386054977: *** Starting CSM Layer ***
1335386054978: *** CSM Layer starting with cache disabled ***
1335386054978: *** CSM Layer starting with forwarding enabled ***
1335386055052: DSMLayer starting
1335386055069: UserApp started.
1335386055070: UserApp for Camera Diploma initialized and waiting for requests.
1335386055423: inside sendPacket(Packet p)
1335386055439: Sending UDP payload: 22318
1335386055442: now fully up as LEADER (id=5003) of (1,0)
1335386055442: ..... VCoreDaemon.java stateTransition ends xxxxxxxxxxxx
1335386055454: .......... GPS onLocationChanged ...... 
1335386055455: Loc = Location[mProvider=gps,mTime=1335386056000,mLatitude=42.35801225,mLongitude=-71.09303378,mHasAltitude=true,mAltitude=-22.100000381469727,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=14.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386055455: GPS x/long:-71.09303378, GPS y/lat: 42.35801225. Region width in x: 20.0
1335386055455: location PINPOINTS to region = 1.0, previous 1
1335386055456: Hysteresis is 0.0
1335386055456: stay at region 1
1335386056324: .......... GPS onLocationChanged ...... 
1335386056328: Loc = Location[mProvider=gps,mTime=1335386057000,mLatitude=42.35802353,mLongitude=-71.09301007,mHasAltitude=true,mAltitude=-23.200000762939453,mHasSpeed=true,mSpeed=0.25,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=10.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386056330: GPS x/long:-71.09301007, GPS y/lat: 42.35802353. Region width in x: 20.0
1335386056331: location PINPOINTS to region = 1.0, previous 1
1335386056332: Hysteresis is 0.0
1335386056334: stay at region 1
1335386057345: .......... GPS onLocationChanged ...... 
1335386057346: Loc = Location[mProvider=gps,mTime=1335386058000,mLatitude=42.35803672,mLongitude=-71.09298423,mHasAltitude=true,mAltitude=-23.5,mHasSpeed=true,mSpeed=0.25,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=7.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386057346: GPS x/long:-71.09298423, GPS y/lat: 42.35803672. Region width in x: 20.0
1335386057346: location PINPOINTS to region = 1.0, previous 1
1335386057346: Hysteresis is 0.0
1335386057346: stay at region 1
1335386057355: Received UDP payload: 3660
1335386057359: mux: Inside mux Packet.CLIENT_REQUEST
1335386057359: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386057359: inside handleClientRequest. Originator leader of region 1
1335386057359: got new request, requestCounter = 5018008
1335386057359: Leader received CLIENT_UPLOAD_PHOTO, so send atom packet to myself (remote region = me)
1335386057360: Sending PROC_REQUEST 10:0 (1,0)->(1,0)
1335386057360: Dispatching Atom PROC_REQUEST 10:0 (1,0)->(1,0)
1335386057361: mux: I got a CSM packet at a leader 

1335386057408: %%%%%%%% aside: Leader got Packet.SERVER_SHOW_NEWPHOTO. I'm a leader showing my nonleader/myself client's new photo
1335386057410: I'm a leader and I successfully saved my client's new photo
1335386057411: now showing in UI the new photo I just saved ... 
1335386057411: the photo length: 3013
1335386057472: end of server show photo aside %%%%%%%%%
1335386057360: Note down new request by adding requestCounter=5018008 to HashMap processedRequests
1335386057360: Make FirstLeg Ack regardless of new or already-processed requests
1335386057361: The leader sending a First Leg ack to originator client (which id = 5018)
1335386057361: inside sendPacket(Packet p)
1335386057368: Sending UDP payload: 4024
1335386057373: removed replies before id 0 from sentReplies of size 0
1335386057373: inside handleDSMRequest. At requests's remote leader of region 1
1335386057376: Inside UPLOAD_PHOTO!!
1335386057378: my_gpinfo.isSuccess is now (should be true): true
1335386057378: Region leader successfully uploaded a new photo taken by a client in region. Region leader now display the new photo on its screen (through StatusActivity)
1335386057399: Received PROC_REQUEST 10:0 (1,0)->(1,0), replying PROC_REPLY 10:0 (1,0)->(1,0)
1335386057399: Dispatching Atom PROC_REPLY 10:0 (1,0)->(1,0)
1335386057402: mux: I got a CSM packet at a leader 

1335386057400: Sending UDP payload: 446
1335386057404: Sending UDP payload: 989
1335386057414: Received PROC_REPLY 10:0 (1,0)->(1,0), handing to UserApp
1335386057414: inside handleDSMReply. Now back in originator leader of region 1
1335386057414: DSM layer: Going to and from remote region took latency = 55
1335386057414: DSM layer: orig leader sent packet at 1335386057359 ~ received reply from remote leader at 1335386057414
1335386057421: Originator Region=1's Leader (for Client=5018) processes remote region's dsm atom reply and will send Packet reply to Originator Client
1335386057421: change leader replyCounter to: 1
1335386057421: reply packet contains the success info for UPLOAD_PHOTO
1335386057422: inside sendReplies of replyCount = 500300001
1335386057422: =======================
1335386057422: inside sendReplyRepeatingRunnable for replyCount = 500300001
1335386057422: Leader about to send REPLY packet, number: 500300001 type: 16 Leader in region: (1,0) to Client nodID: 5018
1335386057422: I (the leader) was not the originator client (which id = 5018) so I use UDP to send packet back to my nonleader
1335386057423: inside sendPacket(Packet p)
1335386057423: === Finished one round of sending REPLY Packet =======
1335386057424: Sending UDP payload: 642
1335386057607: Received UDP payload: 3997
1335386057609: mux: Inside mux Packet.CLIENT_REQUEST
1335386057609: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386057609: inside handleClientRequest. Originator leader of region 1
1335386057609: got new request, requestCounter = 5018009
1335386057609: Leader received CLIENT_UPLOAD_PHOTO, so send atom packet to myself (remote region = me)
1335386057609: Sending PROC_REQUEST 10:1 (1,0)->(1,0)
1335386057610: Dispatching Atom PROC_REQUEST 10:1 (1,0)->(1,0)
1335386057610: mux: I got a CSM packet at a leader 

1335386057625: %%%%%%%% aside: Leader got Packet.SERVER_SHOW_NEWPHOTO. I'm a leader showing my nonleader/myself client's new photo
1335386057627: I'm a leader and I successfully saved my client's new photo
1335386057627: now showing in UI the new photo I just saved ... 
1335386057627: the photo length: 3350
1335386057666: end of server show photo aside %%%%%%%%%
1335386057610: Note down new request by adding requestCounter=5018009 to HashMap processedRequests
1335386057610: Make FirstLeg Ack regardless of new or already-processed requests
1335386057610: The leader sending a First Leg ack to originator client (which id = 5018)
1335386057610: inside sendPacket(Packet p)
1335386057612: Sending UDP payload: 4361
1335386057616: removed replies before id 1 from sentReplies of size 0
1335386057617: inside handleDSMRequest. At requests's remote leader of region 1
1335386057618: Inside UPLOAD_PHOTO!!
1335386057619: my_gpinfo.isSuccess is now (should be true): true
1335386057619: Region leader successfully uploaded a new photo taken by a client in region. Region leader now display the new photo on its screen (through StatusActivity)
1335386057621: Received PROC_REQUEST 10:1 (1,0)->(1,0), replying PROC_REPLY 10:1 (1,0)->(1,0)
1335386057621: Dispatching Atom PROC_REPLY 10:1 (1,0)->(1,0)
1335386057652: mux: I got a CSM packet at a leader 

1335386057622: Sending UDP payload: 446
1335386057654: Sending UDP payload: 989
1335386057656: Received PROC_REPLY 10:1 (1,0)->(1,0), handing to UserApp
1335386057656: inside handleDSMReply. Now back in originator leader of region 1
1335386057656: DSM layer: Going to and from remote region took latency = 47
1335386057656: DSM layer: orig leader sent packet at 1335386057609 ~ received reply from remote leader at 1335386057656
1335386057658: Originator Region=1's Leader (for Client=5018) processes remote region's dsm atom reply and will send Packet reply to Originator Client
1335386057658: change leader replyCounter to: 2
1335386057658: reply packet contains the success info for UPLOAD_PHOTO
1335386057658: inside sendReplies of replyCount = 500300002
1335386057658: =======================
1335386057658: inside sendReplyRepeatingRunnable for replyCount = 500300002
1335386057659: Leader about to send REPLY packet, number: 500300002 type: 16 Leader in region: (1,0) to Client nodID: 5018
1335386057659: I (the leader) was not the originator client (which id = 5018) so I use UDP to send packet back to my nonleader
1335386057659: inside sendPacket(Packet p)
1335386057659: === Finished one round of sending REPLY Packet =======
1335386057661: Sending UDP payload: 642
1335386057679: Received UDP payload: 3997
1335386057681: mux: Inside mux Packet.CLIENT_REQUEST
1335386057681: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386057681: inside handleClientRequest. Originator leader of region 1
1335386057681: discarding repeated requestCounter=5018009, but still send an ack back
1335386057682: Note down new request by adding requestCounter=5018009 to HashMap processedRequests
1335386057682: Make FirstLeg Ack regardless of new or already-processed requests
1335386057682: The leader sending a First Leg ack to originator client (which id = 5018)
1335386057682: inside sendPacket(Packet p)
1335386057683: Sending UDP payload: 446
1335386057723: =======================
1335386057723: inside sendReplyRepeatingRunnable for replyCount = 500300001
1335386057723: Leader about to send REPLY packet, number: 500300001 type: 16 Leader in region: (1,0) to Client nodID: 5018
1335386057723: I (the leader) was not the originator client (which id = 5018) so I use UDP to send packet back to my nonleader
1335386057723: inside sendPacket(Packet p)
1335386057723: === Finished one round of sending REPLY Packet =======
1335386057725: Sending UDP payload: 642
1335386057755: Received UDP payload: 3997
1335386057758: mux: Inside mux Packet.CLIENT_REQUEST
1335386057758: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386057758: inside handleClientRequest. Originator leader of region 1
1335386057759: discarding repeated requestCounter=5018009, but still send an ack back
1335386057759: Note down new request by adding requestCounter=5018009 to HashMap processedRequests
1335386057759: Make FirstLeg Ack regardless of new or already-processed requests
1335386057759: The leader sending a First Leg ack to originator client (which id = 5018)
1335386057759: inside sendPacket(Packet p)
1335386057760: Sending UDP payload: 446
1335386057863: Received UDP payload: 3997
1335386057865: mux: Inside mux Packet.CLIENT_REQUEST
1335386057865: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386057866: inside handleClientRequest. Originator leader of region 1
1335386057866: discarding repeated requestCounter=5018009, but still send an ack back
1335386057866: Note down new request by adding requestCounter=5018009 to HashMap processedRequests
1335386057866: Make FirstLeg Ack regardless of new or already-processed requests
1335386057866: The leader sending a First Leg ack to originator client (which id = 5018)
1335386057866: inside sendPacket(Packet p)
1335386057867: Sending UDP payload: 446
1335386057874: Received UDP payload: 446
1335386057888: Received UDP payload: 446
1335386057901: Received UDP payload: 446
1335386057923: Received UDP payload: 446
1335386057960: =======================
1335386057960: inside sendReplyRepeatingRunnable for replyCount = 500300002
1335386057961: Leader about to send REPLY packet, number: 500300002 type: 16 Leader in region: (1,0) to Client nodID: 5018
1335386057961: I (the leader) was not the originator client (which id = 5018) so I use UDP to send packet back to my nonleader
1335386057961: inside sendPacket(Packet p)
1335386057961: === Finished one round of sending REPLY Packet =======
1335386057962: Sending UDP payload: 642
1335386058024: =======================
1335386058024: inside sendReplyRepeatingRunnable for replyCount = 500300001
1335386058024: Leader about to send REPLY packet, number: 500300001 type: 16 Leader in region: (1,0) to Client nodID: 5018
1335386058024: I (the leader) was not the originator client (which id = 5018) so I use UDP to send packet back to my nonleader
1335386058025: inside sendPacket(Packet p)
1335386058025: === Finished one round of sending REPLY Packet =======
1335386058027: Sending UDP payload: 642
1335386058261: =======================
1335386058262: inside sendReplyRepeatingRunnable for replyCount = 500300002
1335386058263: Leader about to send REPLY packet, number: 500300002 type: 16 Leader in region: (1,0) to Client nodID: 5018
1335386058264: I (the leader) was not the originator client (which id = 5018) so I use UDP to send packet back to my nonleader
1335386058265: inside sendPacket(Packet p)
1335386058266: === Finished one round of sending REPLY Packet =======
1335386058270: Sending UDP payload: 642
1335386058325: =======================
1335386058326: inside sendReplyRepeatingRunnable for replyCount = 500300001
1335386058327: Leader about to send REPLY packet, number: 500300001 type: 16 Leader in region: (1,0) to Client nodID: 5018
1335386058327: I (the leader) was not the originator client (which id = 5018) so I use UDP to send packet back to my nonleader
1335386058328: inside sendPacket(Packet p)
1335386058328: === Finished one round of sending REPLY Packet =======
1335386058339: Sending UDP payload: 642
1335386058378: .......... GPS onLocationChanged ...... 
1335386058379: Loc = Location[mProvider=gps,mTime=1335386059000,mLatitude=42.35805876,mLongitude=-71.09293435,mHasAltitude=true,mAltitude=-23.200000762939453,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=6.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386058379: GPS x/long:-71.09293435, GPS y/lat: 42.35805876. Region width in x: 20.0
1335386058379: location PINPOINTS to region = 1.0, previous 1
1335386058379: Hysteresis is 0.0
1335386058379: stay at region 1
1335386058423: inside sendReplyTimeoutR
1335386058423: deleting the key's associated reply_REPEATING_RMap runnable for replyCount 500300001
1335386058567: =======================
1335386058567: inside sendReplyRepeatingRunnable for replyCount = 500300002
1335386058567: Leader about to send REPLY packet, number: 500300002 type: 16 Leader in region: (1,0) to Client nodID: 5018
1335386058567: I (the leader) was not the originator client (which id = 5018) so I use UDP to send packet back to my nonleader
1335386058568: inside sendPacket(Packet p)
1335386058568: === Finished one round of sending REPLY Packet =======
1335386058569: Sending UDP payload: 642
1335386058659: inside sendReplyTimeoutR
1335386058660: deleting the key's associated reply_REPEATING_RMap runnable for replyCount 500300002
1335386058944: inside sendPacket(Packet p)
1335386058948: Sending UDP payload: 446
1335386059331: .......... GPS onLocationChanged ...... 
1335386059332: Loc = Location[mProvider=gps,mTime=1335386060000,mLatitude=42.35806875,mLongitude=-71.09291136,mHasAltitude=true,mAltitude=-23.299999237060547,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=5.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386059332: GPS x/long:-71.09291136, GPS y/lat: 42.35806875. Region width in x: 20.0
1335386059332: location PINPOINTS to region = 1.0, previous 1
1335386059332: Hysteresis is 0.0
1335386059332: stay at region 1
1335386060350: .......... GPS onLocationChanged ...... 
1335386060351: Loc = Location[mProvider=gps,mTime=1335386061000,mLatitude=42.35807884,mLongitude=-71.09290001,mHasAltitude=true,mAltitude=-23.399999618530273,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=5.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386060351: GPS x/long:-71.09290001, GPS y/lat: 42.35807884. Region width in x: 20.0
1335386060351: location PINPOINTS to region = 1.0, previous 1
1335386060352: Hysteresis is 0.0
1335386060352: stay at region 1
1335386060592: canPressButton = TRUE
1335386060593: areButtonsEnabled --> false
1335386060593: disabling buttons ...
1335386060593: took picture disableButtonsR
1335386060594: areButtonsEnabled --> false
1335386060709: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=1 takeCamGood=0 takeGoodSave=0 takeBad=0 takeTimedout=0 takePercent=0% getNum=0 getGood=0 getBad=0 getTimedout=0 getPercent=-1%
1335386060710: Clicked take picture button ..
1335386062134: inside HandlePictureStorage onPictureTaken()
1335386062135: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=1 takeCamGood=1 takeGoodSave=0 takeBad=0 takeTimedout=0 takePercent=0% getNum=0 getGood=0 getBad=0 getTimedout=0 getPercent=-1%
1335386062399: Picture successfully taken, ORIG BYTE LENGTH = 3542790
1335386062607: Our new height x width: 306 x 408
1335386062608: Show photo from handle my camera take
1335386062608: ** Client making NEWly TAKEN photo PACKET to send to leader **
1335386062608: change local requestCounter to 1
1335386062622: BYTE SIZE AFTER COMPRESSION: 4632
1335386062626: Client about to send CLIENT_UPLOAD_PHOTO packet, REQUEST: 5003001 Client in region: 1 Client nodID: 5003
1335386062659: .......... GPS onLocationChanged ...... 
1335386062661: ----------------------------
1335386062662: inside sendRequestPacketRepeatingRunnable for requestCount = 5003001
1335386062662: I'm a leader, my requesting photos packet going to mux directly
1335386062673: --- Finished one round of sending REQUEST Packet ---------
1335386062659: Loc = Location[mProvider=gps,mTime=1335386063000,mLatitude=42.35808808,mLongitude=-71.09289569,mHasAltitude=true,mAltitude=-23.299999237060547,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386062660: GPS x/long:-71.09289569, GPS y/lat: 42.35808808. Region width in x: 20.0
1335386062660: location PINPOINTS to region = 1.0, previous 1
1335386062660: Hysteresis is 0.0
1335386062660: stay at region 1
1335386062662: mux: Inside mux Packet.CLIENT_REQUEST
1335386062662: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386062706: Client received Packet.SERVER_FIRST_LEG_ACK. Yay the first leg succeeded, removing all request runnables
1335386062662: inside handleClientRequest. Originator leader of region 1
1335386062663: got new request, requestCounter = 5003001
1335386062663: Leader received CLIENT_UPLOAD_PHOTO, so send atom packet to myself (remote region = me)
1335386062663: Sending PROC_REQUEST 10:2 (1,0)->(1,0)
1335386062663: Dispatching Atom PROC_REQUEST 10:2 (1,0)->(1,0)
1335386062664: mux: I got a CSM packet at a leader 

1335386062708: %%%%%%%% aside: Leader got Packet.SERVER_SHOW_NEWPHOTO. I'm a leader showing my nonleader/myself client's new photo
1335386062709: I'm a leader and I successfully saved my client's new photo
1335386062710: now showing in UI the new photo I just saved ... 
1335386062710: the photo length: 4632
1335386062743: end of server show photo aside %%%%%%%%%
1335386062664: Note down new request by adding requestCounter=5003001 to HashMap processedRequests
1335386062664: Make FirstLeg Ack regardless of new or already-processed requests
1335386062664: sending a First Leg ack to myself, becaues I (the leader) was also the originator client (id = 5003)
1335386062666: Sending UDP payload: 5643
1335386062667: removed replies before id 2 from sentReplies of size 0
1335386062667: inside handleDSMRequest. At requests's remote leader of region 1
1335386062669: Inside UPLOAD_PHOTO!!
1335386062670: my_gpinfo.isSuccess is now (should be true): true
1335386062670: Region leader successfully uploaded a new photo taken by a client in region. Region leader now display the new photo on its screen (through StatusActivity)
1335386062672: Received PROC_REQUEST 10:2 (1,0)->(1,0), replying PROC_REPLY 10:2 (1,0)->(1,0)
1335386062683: Dispatching Atom PROC_REPLY 10:2 (1,0)->(1,0)
1335386062684: mux: I got a CSM packet at a leader 

1335386062744: Client received Packet.CLIENT_UPLOAD_PHOTO_ACK
1335386062745: disabling progressdialog due to successful new photo upload
1335386062745: Inside _enableButtons
1335386062746: areButtonsEnabled --> true
1335386062746: send final leg ack regardless of new or already-processed reply
1335386062746: inside finalLegAck: change requestCounter to 2
1335386062746: Client about to send CLIENT_FINAL_LEG_ACK packet, REQUEST: 5003002 Client in region: (1,0) Client nodID: 5003
1335386062747: I'm a leader client, my final_leg packet going to mux directly
1335386062749: new client_upload_photo_ack reply with replyCounter 500300003
1335386062749: note down new reply by adding replyCounter=500300003 to HashMap processedReplies
1335386062749: leader upload new photo latency = 1335386062744
1335386062749: = leader upload start 0 ~ stop 1335386062744
1335386062751: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=1 takeCamGood=1 takeGoodSave=1 takeBad=0 takeTimedout=0 takePercent=100% getNum=0 getGood=0 getBad=0 getTimedout=0 getPercent=-1%
1335386062751: SUCCESS Client now knows saving photo on its leader succeeded
1335386062686: Sending UDP payload: 989
1335386062688: Received PROC_REPLY 10:2 (1,0)->(1,0), handing to UserApp
1335386062688: inside handleDSMReply. Now back in originator leader of region 1
1335386062688: DSM layer: Going to and from remote region took latency = 25
1335386062688: DSM layer: orig leader sent packet at 1335386062663 ~ received reply from remote leader at 1335386062688
1335386062689: Originator Region=1's Leader (for Client=5003) processes remote region's dsm atom reply and will send Packet reply to Originator Client
1335386062689: change leader replyCounter to: 3
1335386062689: reply packet contains the success info for UPLOAD_PHOTO
1335386062689: inside sendReplies of replyCount = 500300003
1335386062689: =======================
1335386062690: inside sendReplyRepeatingRunnable for replyCount = 500300003
1335386062690: Leader about to send REPLY packet, number: 500300003 type: 16 Leader in region: (1,0) to Client nodID: 5003
1335386062690: I (the leader) was also the originator client (id = 5003) so I hand the packet to my mux directly, without UDP
1335386062690: === Finished one round of sending REPLY Packet =======
1335386062747: mux: Inside mux Packet.CLIENT_REQUEST
1335386062747: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386062747: inside handleClientRequest. Originator leader of region 1
1335386062747: got new request, requestCounter = 5003002
1335386062747: Leader received CLIENT_FINAL_LEG_ACK with replyCounter of 500300003
1335386062747: Yay the last leg succeeded. Removing reply runnables ...
1335386062748: deleting the key's associated reply_REPEATING_RMap runnable for replyCount 500300003
1335386062748: deleting the key's associated reply_TIMEOUT_RMap runnable for replyCount 500300003
1335386062748: do not send ack for received final_leg_ack
1335386063049: Received UDP payload: 23037
1335386063945: inside sendPacket(Packet p)
1335386063956: Sending UDP payload: 446
1335386068958: inside sendPacket(Packet p)
1335386068969: Sending UDP payload: 446
1335386071325: .......... GPS onLocationChanged ...... 
1335386071329: Loc = Location[mProvider=gps,mTime=1335386072000,mLatitude=42.35809543,mLongitude=-71.09288278,mHasAltitude=true,mAltitude=-24.399999618530273,mHasSpeed=true,mSpeed=0.25,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386071330: GPS x/long:-71.09288278, GPS y/lat: 42.35809543. Region width in x: 20.0
1335386071331: location PINPOINTS to region = 1.0, previous 1
1335386071333: Hysteresis is 0.0
1335386071334: stay at region 1
1335386073316: .......... GPS onLocationChanged ...... 
1335386073318: Loc = Location[mProvider=gps,mTime=1335386074000,mLatitude=42.35810501,mLongitude=-71.09286541,mHasAltitude=true,mAltitude=-24.200000762939453,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386073319: GPS x/long:-71.09286541, GPS y/lat: 42.35810501. Region width in x: 20.0
1335386073321: location PINPOINTS to region = 1.0, previous 1
1335386073321: Hysteresis is 0.0
1335386073323: stay at region 1
1335386073662: canPressButton = TRUE
1335386073662: areButtonsEnabled --> false 
1335386073662: get picture disableButtonsR
1335386073662: areButtonsEnabled --> false
1335386073689: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=1 takeCamGood=1 takeGoodSave=1 takeBad=0 takeTimedout=0 takePercent=100% getNum=1 getGood=0 getBad=0 getTimedout=0 getPercent=0%
1335386073690: ** Client making GET photo PACKET to send to the leader. Requesting for region: 1 **
1335386073690: change local requestCounter to 3
1335386073691: Client about to send CLIENT_DOWNLOAD_PHOTO packet, REQUEST: 5003003 Client in region: 1 Client nodID: 5003
1335386073725: ----------------------------
1335386073726: inside sendRequestPacketRepeatingRunnable for requestCount = 5003003
1335386073726: I'm a leader, my requesting photos packet going to mux directly
1335386073740: --- Finished one round of sending REQUEST Packet ---------
1335386073727: mux: Inside mux Packet.CLIENT_REQUEST
1335386073727: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386073788: Client received Packet.SERVER_FIRST_LEG_ACK. Yay the first leg succeeded, removing all request runnables
1335386073727: inside handleClientRequest. Originator leader of region 1
1335386073727: got new request, requestCounter = 5003003
1335386073727: Leader received CLIENT_DOWNLOAD_PHOTO, figure out where (remote region) to forward packet
1335386073728: Sending to region: 1
1335386073728: Sending PROC_REQUEST 11:3 (1,0)->(1,0)
1335386073729: Dispatching Atom PROC_REQUEST 11:3 (1,0)->(1,0)
1335386073729: mux: I got a CSM packet at a leader 

1335386073729: Note down new request by adding requestCounter=5003003 to HashMap processedRequests
1335386073729: Make FirstLeg Ack regardless of new or already-processed requests
1335386073729: sending a First Leg ack to myself, becaues I (the leader) was also the originator client (id = 5003)
1335386073734: Sending UDP payload: 989
1335386073734: removed replies before id 3 from sentReplies of size 0
1335386073735: inside handleDSMRequest. At requests's remote leader of region 1
1335386073736: INSIDE SERVER_GET_PHOTO!!!
1335386073737: dst_region == src_region = 1
1335386073737:  1 self to self atomRequest
1335386073739: Received PROC_REQUEST 11:3 (1,0)->(1,0), replying PROC_REPLY 11:3 (1,0)->(1,0)
1335386073749: Dispatching Atom PROC_REPLY 11:3 (1,0)->(1,0)
1335386073749: mux: I got a CSM packet at a leader 

1335386073790: Client received Packet.CLIENT_SHOW_REMOTEPHOTOS. Client requested for a photo in a remote region and this is the reply
1335386073790: disabling progressdialog due to successful new photo get
1335386073791: Inside _enableButtons
1335386073791: areButtonsEnabled --> true
1335386073791: send final leg ack regardless of new or already-processed reply
1335386073795: inside finalLegAck: change requestCounter to 4
1335386073796: Client about to send CLIENT_FINAL_LEG_ACK packet, REQUEST: 5003004 Client in region: (1,0) Client nodID: 5003
1335386073796: I'm a leader client, my final_leg packet going to mux directly
1335386073798: new client_show_remotephoto reply with replyCounter 500300004
1335386073798: note down new reply by adding replyCounter=500300004 to HashMap processedReplies
1335386073799: leader download remote photo latency = 63
1335386073799: = leader download start 1335386073727 ~ stop 1335386073790
1335386073800: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=1 takeCamGood=1 takeGoodSave=1 takeBad=0 takeTimedout=0 takePercent=100% getNum=1 getGood=1 getBad=0 getTimedout=0 getPercent=100%
1335386073801: Success! Client getting photo from remote region, showing photo...
1335386073801: Remote photo's length: 4632
1335386073751: Sending UDP payload: 5643
1335386073756: Received PROC_REPLY 11:3 (1,0)->(1,0), handing to UserApp
1335386073756: inside handleDSMReply. Now back in originator leader of region 1
1335386073756: DSM layer: Going to and from remote region took latency = 28
1335386073756: DSM layer: orig leader sent packet at 1335386073728 ~ received reply from remote leader at 1335386073756
1335386073757: Originator Region=1's Leader (for Client=5003) processes remote region's dsm atom reply and will send Packet reply to Originator Client
1335386073758: change leader replyCounter to: 4
1335386073758: reply packet contains the newest photo/success info from the remote region
1335386073758: inside sendReplies of replyCount = 500300004
1335386073758: =======================
1335386073758: inside sendReplyRepeatingRunnable for replyCount = 500300004
1335386073758: Leader about to send REPLY packet, number: 500300004 type: 15 Leader in region: (1,0) to Client nodID: 5003
1335386073759: I (the leader) was also the originator client (id = 5003) so I hand the packet to my mux directly, without UDP
1335386073759: === Finished one round of sending REPLY Packet =======
1335386073796: mux: Inside mux Packet.CLIENT_REQUEST
1335386073796: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386073796: inside handleClientRequest. Originator leader of region 1
1335386073797: got new request, requestCounter = 5003004
1335386073797: Leader received CLIENT_FINAL_LEG_ACK with replyCounter of 500300004
1335386073797: Yay the last leg succeeded. Removing reply runnables ...
1335386073797: deleting the key's associated reply_REPEATING_RMap runnable for replyCount 500300004
1335386073797: deleting the key's associated reply_TIMEOUT_RMap runnable for replyCount 500300004
1335386073797: do not send ack for received final_leg_ack
1335386073973: inside sendPacket(Packet p)
1335386073975: Sending UDP payload: 446
1335386078973: inside sendPacket(Packet p)
1335386078977: Sending UDP payload: 446
1335386079449: Received UDP payload: 446
1335386079461: Received UDP payload: 446
1335386079489: Received UDP payload: 446
1335386079500: Received UDP payload: 446
1335386079514: heard LEADER_REQUEST from node 5012, responding LEADER_REPLY
1335386079538: Received UDP payload: 446
1335386079571: Received UDP payload: 446
1335386079710: inside sendPacket(Packet p)
1335386079723: Sending UDP payload: 32403
1335386079726: heard LEADER_REQUEST from node 5012, responding LEADER_REPLY
1335386079776: Received UDP payload: 8648
1335386079778: mux: Inside mux Packet.CLIENT_REQUEST
1335386079778: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386079778: inside handleClientRequest. Originator leader of region 1
1335386079778: got new request, requestCounter = 5012005
1335386079778: Leader received CLIENT_UPLOAD_PHOTO, so send atom packet to myself (remote region = me)
1335386079779: Sending PROC_REQUEST 10:4 (1,0)->(1,0)
1335386079779: Dispatching Atom PROC_REQUEST 10:4 (1,0)->(1,0)
1335386079780: mux: I got a CSM packet at a leader 

1335386079815: %%%%%%%% aside: Leader got Packet.SERVER_SHOW_NEWPHOTO. I'm a leader showing my nonleader/myself client's new photo
1335386079817: I'm a leader and I successfully saved my client's new photo
1335386079817: now showing in UI the new photo I just saved ... 
1335386079817: the photo length: 8001
1335386079876: end of server show photo aside %%%%%%%%%
1335386079779: Note down new request by adding requestCounter=5012005 to HashMap processedRequests
1335386079779: Make FirstLeg Ack regardless of new or already-processed requests
1335386079779: The leader sending a First Leg ack to originator client (which id = 5012)
1335386079779: inside sendPacket(Packet p)
1335386079781: Sending UDP payload: 9012
1335386079789: removed replies before id 4 from sentReplies of size 0
1335386079789: inside handleDSMRequest. At requests's remote leader of region 1
1335386079791: Inside UPLOAD_PHOTO!!
1335386079792: my_gpinfo.isSuccess is now (should be true): true
1335386079792: Region leader successfully uploaded a new photo taken by a client in region. Region leader now display the new photo on its screen (through StatusActivity)
1335386079803: Received PROC_REQUEST 10:4 (1,0)->(1,0), replying PROC_REPLY 10:4 (1,0)->(1,0)
1335386079803: Dispatching Atom PROC_REPLY 10:4 (1,0)->(1,0)
1335386079808: mux: I got a CSM packet at a leader 

1335386079807: Sending UDP payload: 446
1335386079809: Sending UDP payload: 989
1335386079813: Received PROC_REPLY 10:4 (1,0)->(1,0), handing to UserApp
1335386079813: inside handleDSMReply. Now back in originator leader of region 1
1335386079813: DSM layer: Going to and from remote region took latency = 35
1335386079813: DSM layer: orig leader sent packet at 1335386079778 ~ received reply from remote leader at 1335386079813
1335386079870: Originator Region=1's Leader (for Client=5012) processes remote region's dsm atom reply and will send Packet reply to Originator Client
1335386079877: change leader replyCounter to: 5
1335386079877: reply packet contains the success info for UPLOAD_PHOTO
1335386079878: inside sendReplies of replyCount = 500300005
1335386079933: inside sendPacket(Packet p)
1335386079934: Sending UDP payload: 36038
1335386079935: heard LEADER_REQUEST from node 5012, responding LEADER_REPLY
1335386079964: Received UDP payload: 8648
1335386079966: mux: Inside mux Packet.CLIENT_REQUEST
1335386079966: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386079967: inside handleClientRequest. Originator leader of region 1
1335386079967: discarding repeated requestCounter=5012005, but still send an ack back
1335386079967: Note down new request by adding requestCounter=5012005 to HashMap processedRequests
1335386079967: Make FirstLeg Ack regardless of new or already-processed requests
1335386079967: The leader sending a First Leg ack to originator client (which id = 5012)
1335386079967: inside sendPacket(Packet p)
1335386079969: Sending UDP payload: 446
1335386080026: inside sendPacket(Packet p)
1335386080028: Sending UDP payload: 31118
1335386080029: =======================
1335386080030: inside sendReplyRepeatingRunnable for replyCount = 500300005
1335386080032: Leader about to send REPLY packet, number: 500300005 type: 16 Leader in region: (1,0) to Client nodID: 5012
1335386080033: I (the leader) was not the originator client (which id = 5012) so I use UDP to send packet back to my nonleader
1335386080034: inside sendPacket(Packet p)
1335386080035: Sending UDP payload: 642
1335386080036: === Finished one round of sending REPLY Packet =======
1335386080337: =======================
1335386080337: inside sendReplyRepeatingRunnable for replyCount = 500300005
1335386080337: Leader about to send REPLY packet, number: 500300005 type: 16 Leader in region: (1,0) to Client nodID: 5012
1335386080337: I (the leader) was not the originator client (which id = 5012) so I use UDP to send packet back to my nonleader
1335386080337: inside sendPacket(Packet p)
1335386080338: === Finished one round of sending REPLY Packet =======
1335386080339: Sending UDP payload: 642
1335386080637: =======================
1335386080638: inside sendReplyRepeatingRunnable for replyCount = 500300005
1335386080639: Leader about to send REPLY packet, number: 500300005 type: 16 Leader in region: (1,0) to Client nodID: 5012
1335386080640: I (the leader) was not the originator client (which id = 5012) so I use UDP to send packet back to my nonleader
1335386080640: inside sendPacket(Packet p)
1335386080641: === Finished one round of sending REPLY Packet =======
1335386080646: Sending UDP payload: 642
1335386080879: inside sendReplyTimeoutR
1335386080880: deleting the key's associated reply_REPEATING_RMap runnable for replyCount 500300005
1335386080937: canPressButton = TRUE
1335386080938: areButtonsEnabled --> false
1335386080938: disabling buttons ...
1335386080938: took picture disableButtonsR
1335386080939: areButtonsEnabled --> false
1335386080965: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=2 takeCamGood=1 takeGoodSave=1 takeBad=0 takeTimedout=0 takePercent=50% getNum=1 getGood=1 getBad=0 getTimedout=0 getPercent=100%
1335386080965: Clicked take picture button ..
1335386081294: .......... GPS onLocationChanged ...... 
1335386081295: Loc = Location[mProvider=gps,mTime=1335386082000,mLatitude=42.35811455,mLongitude=-71.09286413,mHasAltitude=true,mAltitude=-24.0,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386081295: GPS x/long:-71.09286413, GPS y/lat: 42.35811455. Region width in x: 20.0
1335386081295: location PINPOINTS to region = 1.0, previous 1
1335386081295: Hysteresis is 0.0
1335386081295: stay at region 1
1335386082432: inside HandlePictureStorage onPictureTaken()
1335386082433: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=2 takeCamGood=2 takeGoodSave=1 takeBad=0 takeTimedout=0 takePercent=50% getNum=1 getGood=1 getBad=0 getTimedout=0 getPercent=100%
1335386082723: Picture successfully taken, ORIG BYTE LENGTH = 3634129
1335386082960: Our new height x width: 306 x 408
1335386082960: Show photo from handle my camera take
1335386082961: ** Client making NEWly TAKEN photo PACKET to send to leader **
1335386082962: change local requestCounter to 5
1335386082981: BYTE SIZE AFTER COMPRESSION: 6678
1335386082982: Client about to send CLIENT_UPLOAD_PHOTO packet, REQUEST: 5003005 Client in region: 1 Client nodID: 5003
1335386083025: ----------------------------
1335386083026: inside sendRequestPacketRepeatingRunnable for requestCount = 5003005
1335386083027: I'm a leader, my requesting photos packet going to mux directly
1335386083038: --- Finished one round of sending REQUEST Packet ---------
1335386083027: mux: Inside mux Packet.CLIENT_REQUEST
1335386083027: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386083076: Client received Packet.SERVER_FIRST_LEG_ACK. Yay the first leg succeeded, removing all request runnables
1335386083027: inside handleClientRequest. Originator leader of region 1
1335386083028: got new request, requestCounter = 5003005
1335386083028: Leader received CLIENT_UPLOAD_PHOTO, so send atom packet to myself (remote region = me)
1335386083028: Sending PROC_REQUEST 10:5 (1,0)->(1,0)
1335386083029: Dispatching Atom PROC_REQUEST 10:5 (1,0)->(1,0)
1335386083030: mux: I got a CSM packet at a leader 

1335386083077: %%%%%%%% aside: Leader got Packet.SERVER_SHOW_NEWPHOTO. I'm a leader showing my nonleader/myself client's new photo
1335386083079: I'm a leader and I successfully saved my client's new photo
1335386083079: now showing in UI the new photo I just saved ... 
1335386083080: the photo length: 6678
1335386083117: end of server show photo aside %%%%%%%%%
1335386083029: Note down new request by adding requestCounter=5003005 to HashMap processedRequests
1335386083029: Make FirstLeg Ack regardless of new or already-processed requests
1335386083029: sending a First Leg ack to myself, becaues I (the leader) was also the originator client (id = 5003)
1335386083032: Sending UDP payload: 7689
1335386083033: removed replies before id 5 from sentReplies of size 0
1335386083034: inside handleDSMRequest. At requests's remote leader of region 1
1335386083036: Inside UPLOAD_PHOTO!!
1335386083037: my_gpinfo.isSuccess is now (should be true): true
1335386083038: Region leader successfully uploaded a new photo taken by a client in region. Region leader now display the new photo on its screen (through StatusActivity)
1335386083046: Received PROC_REQUEST 10:5 (1,0)->(1,0), replying PROC_REPLY 10:5 (1,0)->(1,0)
1335386083047: Dispatching Atom PROC_REPLY 10:5 (1,0)->(1,0)
1335386083048: mux: I got a CSM packet at a leader 

1335386083119: Client received Packet.CLIENT_UPLOAD_PHOTO_ACK
1335386083119: disabling progressdialog due to successful new photo upload
1335386083119: Inside _enableButtons
1335386083119: areButtonsEnabled --> true
1335386083120: send final leg ack regardless of new or already-processed reply
1335386083120: inside finalLegAck: change requestCounter to 6
1335386083120: Client about to send CLIENT_FINAL_LEG_ACK packet, REQUEST: 5003006 Client in region: (1,0) Client nodID: 5003
1335386083121: I'm a leader client, my final_leg packet going to mux directly
1335386083123: new client_upload_photo_ack reply with replyCounter 500300006
1335386083123: note down new reply by adding replyCounter=500300006 to HashMap processedReplies
1335386083123: leader upload new photo latency = 1335386083119
1335386083124: = leader upload start 0 ~ stop 1335386083119
1335386083125: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=2 takeCamGood=2 takeGoodSave=2 takeBad=0 takeTimedout=0 takePercent=100% getNum=1 getGood=1 getBad=0 getTimedout=0 getPercent=100%
1335386083125: SUCCESS Client now knows saving photo on its leader succeeded
1335386083050: Sending UDP payload: 989
1335386083057: Received PROC_REPLY 10:5 (1,0)->(1,0), handing to UserApp
1335386083057: inside handleDSMReply. Now back in originator leader of region 1
1335386083057: DSM layer: Going to and from remote region took latency = 29
1335386083057: DSM layer: orig leader sent packet at 1335386083028 ~ received reply from remote leader at 1335386083057
1335386083058: Originator Region=1's Leader (for Client=5003) processes remote region's dsm atom reply and will send Packet reply to Originator Client
1335386083058: change leader replyCounter to: 6
1335386083059: reply packet contains the success info for UPLOAD_PHOTO
1335386083059: inside sendReplies of replyCount = 500300006
1335386083059: =======================
1335386083060: inside sendReplyRepeatingRunnable for replyCount = 500300006
1335386083060: Leader about to send REPLY packet, number: 500300006 type: 16 Leader in region: (1,0) to Client nodID: 5003
1335386083060: I (the leader) was also the originator client (id = 5003) so I hand the packet to my mux directly, without UDP
1335386083060: === Finished one round of sending REPLY Packet =======
1335386083121: mux: Inside mux Packet.CLIENT_REQUEST
1335386083121: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386083121: inside handleClientRequest. Originator leader of region 1
1335386083121: got new request, requestCounter = 5003006
1335386083122: Leader received CLIENT_FINAL_LEG_ACK with replyCounter of 500300006
1335386083122: Yay the last leg succeeded. Removing reply runnables ...
1335386083122: deleting the key's associated reply_REPEATING_RMap runnable for replyCount 500300006
1335386083122: deleting the key's associated reply_TIMEOUT_RMap runnable for replyCount 500300006
1335386083122: do not send ack for received final_leg_ack
1335386083975: inside sendPacket(Packet p)
1335386083976: Sending UDP payload: 446
1335386086171: Received UDP payload: 23037
1335386088353: .......... GPS onLocationChanged ...... 
1335386088354: Loc = Location[mProvider=gps,mTime=1335386089000,mLatitude=42.35812405,mLongitude=-71.09286159,mHasAltitude=true,mAltitude=-22.399999618530273,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386088354: GPS x/long:-71.09286159, GPS y/lat: 42.35812405. Region width in x: 20.0
1335386088354: location PINPOINTS to region = 1.0, previous 1
1335386088354: Hysteresis is 0.0
1335386088355: stay at region 1
1335386088974: inside sendPacket(Packet p)
1335386088978: Sending UDP payload: 446
1335386093975: inside sendPacket(Packet p)
1335386093988: Sending UDP payload: 446
1335386097709: Received UDP payload: 8648
1335386097711: mux: Inside mux Packet.CLIENT_REQUEST
1335386097711: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386097712: inside handleClientRequest. Originator leader of region 1
1335386097712: discarding repeated requestCounter=5012005, but still send an ack back
1335386097712: Note down new request by adding requestCounter=5012005 to HashMap processedRequests
1335386097712: Make FirstLeg Ack regardless of new or already-processed requests
1335386097712: The leader sending a First Leg ack to originator client (which id = 5012)
1335386097712: inside sendPacket(Packet p)
1335386097713: Sending UDP payload: 446
1335386097878: Received UDP payload: 8648
1335386097880: mux: Inside mux Packet.CLIENT_REQUEST
1335386097880: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386097881: inside handleClientRequest. Originator leader of region 1
1335386097881: discarding repeated requestCounter=5012005, but still send an ack back
1335386097881: Note down new request by adding requestCounter=5012005 to HashMap processedRequests
1335386097881: Make FirstLeg Ack regardless of new or already-processed requests
1335386097881: The leader sending a First Leg ack to originator client (which id = 5012)
1335386097881: inside sendPacket(Packet p)
1335386097882: Sending UDP payload: 446
1335386097926: Received UDP payload: 446
1335386097932: heard LEADER_REQUEST from node 5012, responding LEADER_REPLY
1335386097945: Received UDP payload: 446
1335386098028: Received UDP payload: 446
1335386098033: Received UDP payload: 446
1335386098050: Received UDP payload: 446
1335386098076: inside sendPacket(Packet p)
1335386098093: Sending UDP payload: 29795
1335386098095: heard LEADER_REQUEST from node 5012, responding LEADER_REPLY
1335386098176: inside sendPacket(Packet p)
1335386098190: Sending UDP payload: 29795
1335386098191: heard LEADER_REQUEST from node 5012, responding LEADER_REPLY
1335386098278: inside sendPacket(Packet p)
1335386098293: Sending UDP payload: 29795
1335386098304: heard LEADER_REQUEST from node 5012, responding LEADER_REPLY
1335386098430: canPressButton = TRUE
1335386098430: areButtonsEnabled --> false 
1335386098431: get picture disableButtonsR
1335386098431: areButtonsEnabled --> false
1335386098453: reg=1 id=5003 state=2 regionWidth=20.0 hyst=0.0 takeNum=2 takeCamGood=2 takeGoodSave=2 takeBad=0 takeTimedout=0 takePercent=100% getNum=2 getGood=1 getBad=0 getTimedout=0 getPercent=50%
1335386098453: ** Client making GET photo PACKET to send to the leader. Requesting for region: 2 **
1335386098453: change local requestCounter to 7
1335386098454: Client about to send CLIENT_DOWNLOAD_PHOTO packet, REQUEST: 5003007 Client in region: 1 Client nodID: 5003
1335386098450: inside sendPacket(Packet p)
1335386098451: Sending UDP payload: 29795
1335386098489: ----------------------------
1335386098489: inside sendRequestPacketRepeatingRunnable for requestCount = 5003007
1335386098489: I'm a leader, my requesting photos packet going to mux directly
1335386098493: --- Finished one round of sending REQUEST Packet ---------
1335386098490: mux: Inside mux Packet.CLIENT_REQUEST
1335386098490: mux: I'm the leader of requesting client, about to process Packet.CLIENT_REQUEST in userApp
1335386098519: Client received Packet.SERVER_FIRST_LEG_ACK. Yay the first leg succeeded, removing all request runnables
1335386098490: inside handleClientRequest. Originator leader of region 1
1335386098490: got new request, requestCounter = 5003007
1335386098490: Leader received CLIENT_DOWNLOAD_PHOTO, figure out where (remote region) to forward packet
1335386098491: Sending to region: 2
1335386098492: Sending PROC_REQUEST 11:0 (1,0)->(2,0)
1335386098492: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386098493: mux: I got a CSM packet at a leader 

1335386104302: .......... GPS onLocationChanged ...... 
1335386104456: reg=2 id=5003 state=4 regionWidth=20.0 hyst=0.0 takeNum=2 takeCamGood=2 takeGoodSave=2 takeBad=0 takeTimedout=0 takePercent=100% getNum=2 getGood=1 getBad=0 getTimedout=1 getPercent=50%
1335386104457: inside buttonsEnableProgressTimeoutR. Perhaps no one is in that region. Try again later!
1335386104470: Inside _enableButtons
1335386104471: areButtonsEnabled --> true
1335386105404: .......... GPS onLocationChanged ...... 
1335386106329: .......... GPS onLocationChanged ...... 
1335386108317: .......... GPS onLocationChanged ...... 
1335386109343: .......... GPS onLocationChanged ...... 
1335386111455: .......... GPS onLocationChanged ...... 
1335386112311: .......... GPS onLocationChanged ...... 
1335386114297: .......... GPS onLocationChanged ...... 
1335386116333: .......... GPS onLocationChanged ...... 
1335386118783: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386118786: can't press any buttons yet, so can't get region
1335386120327: .......... GPS onLocationChanged ...... 
1335386120754: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386120759: can't press any buttons yet, so can't get region
1335386124151: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386124156: can't press camera button yet
1335386124319: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386124323: can't press camera button yet
1335386124357: .......... GPS onLocationChanged ...... 
1335386126305: .......... GPS onLocationChanged ...... 
1335386132375: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386132380: can't press camera button yet
1335386133302: .......... GPS onLocationChanged ...... 
1335386133973: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386133977: can't press camera button yet
1335386135349: .......... GPS onLocationChanged ...... 
1335386141337: .......... GPS onLocationChanged ...... 
1335386141916: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386141923: can't press any buttons yet, so can't get region
1335386145338: .......... GPS onLocationChanged ...... 
1335386153354: .......... GPS onLocationChanged ...... 
1335386155336: .......... GPS onLocationChanged ...... 
1335386156340: .......... GPS onLocationChanged ...... 
1335386157341: .......... GPS onLocationChanged ...... 
1335386158309: .......... GPS onLocationChanged ...... 
1335386160309: .......... GPS onLocationChanged ...... 
1335386162286: .......... GPS onLocationChanged ...... 
1335386162697: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386162702: can't press any buttons yet, so can't get region
1335386163284: .......... GPS onLocationChanged ...... 
1335386166023: canPressButton = false. state is + 1 Can't press button because you're in a transient state (JOINING or HANDING_OFF)
1335386166026: can't press any buttons yet, so can't get region
1335386166327: .......... GPS onLocationChanged ...... 
1335386168341: .......... GPS onLocationChanged ...... 
1335386170310: .......... GPS onLocationChanged ...... 
1335386098492: Note down new request by adding requestCounter=5003007 to HashMap processedRequests
1335386098492: Make FirstLeg Ack regardless of new or already-processed requests
1335386098492: sending a First Leg ack to myself, becaues I (the leader) was also the originator client (id = 5003)
1335386098497: Sending UDP payload: 989
1335386098990: inside sendPacket(Packet p)
1335386099254: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099255: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099356: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099357: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099458: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099458: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099559: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099560: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099661: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099661: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099762: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099762: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099863: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099864: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099966: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386099970: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100072: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100073: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100175: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100176: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100278: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100279: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100380: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100381: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100483: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100485: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100588: Retrying PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100590: Dispatching Atom PROC_REQUEST 11:0 (1,0)->(2,0)
1335386100694: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386100698: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386100800: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386100802: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386100905: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386100906: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101010: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101011: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101113: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101115: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101217: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101219: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101321: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101321: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101422: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101422: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101523: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101524: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101625: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101626: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101729: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101730: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101831: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101833: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386101935: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386101939: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102045: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102047: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102148: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102150: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102256: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102257: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102364: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102366: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102468: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102469: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102572: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102577: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102680: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102681: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102785: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102787: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102890: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102891: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386102996: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386102998: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103102: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103103: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103206: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103207: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103312: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103312: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103414: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103415: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103518: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103519: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103621: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103622: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103724: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103725: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103828: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103829: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103932: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386103933: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386103991: inside sendPacket(Packet p)
1335386104036: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104043: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104145: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104146: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104247: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104248: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104303: Loc = Location[mProvider=gps,mTime=1335386105000,mLatitude=42.3581363,mLongitude=-71.09286935,mHasAltitude=true,mAltitude=-23.299999237060547,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386104304: GPS x/long:-71.09286935, GPS y/lat: 42.3581363. Region width in x: 20.0
1335386104304: location PINPOINTS to region = 2.0, previous 1
1335386104305: Hysteresis is 0.0
1335386104305: location CHANGED TO NEW region = (2,0) from region = (1,0)
1335386104306: moving from region (1,0), to (2,0)
1335386104307: change state to HANDING_OFF with parameter my previous/old region = (1,0) before helping to elect new leader in it. (btw, newRegion (2,0))
1335386104307: VCoreDaemon.java inside stateTransition ..........
1335386104307: removing leaderRequestRetryR because I'm doing a stateTransition
1335386104308: ..... VCoreDaemon.java targetState = HANDING_OFF
1335386104308: HANDING OFF setting leaderRegion = (1,0)
1335386104308: Trying to hand off leadership
1335386104308: ..... VCoreDaemon.java stateTransition ends xxxxxxxxxxxx
1335386104309: broadcasting LEADER_ELECT to old (1,0)
1335386104309: inside sendPacket(Packet p)
1335386104350: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104351: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104452: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104453: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104555: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104556: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104662: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104663: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104764: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104765: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104865: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104866: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386104967: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386104968: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386105068: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386105069: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386105170: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386105170: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386105272: DSM Layer: Request timed out, send failure PROC_REPLY 11:0 (2,0)->(1,0)
1335386105273: Dispatching Atom PROC_REPLY 11:0 (2,0)->(1,0)
1335386105310: INSIDE ELECT CANDIDATE
1335386105310: CANDIDATE SIZE is 0
1335386105310: UserApp stopped.
1335386105310: DSMLayer stopped
1335386105311: serializing DSMLayer to JSON
1335386105405: Loc = Location[mProvider=gps,mTime=1335386106000,mLatitude=42.35814389,mLongitude=-71.09287639,mHasAltitude=true,mAltitude=-23.600000381469727,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386105405: GPS x/long:-71.09287639, GPS y/lat: 42.35814389. Region width in x: 20.0
1335386105406: location PINPOINTS to region = 2.0, previous 2
1335386105406: Hysteresis is 0.0
1335386105406: stay at region 2
1335386106330: Loc = Location[mProvider=gps,mTime=1335386107000,mLatitude=42.35815385,mLongitude=-71.09288806,mHasAltitude=true,mAltitude=-23.899999618530273,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386106330: GPS x/long:-71.09288806, GPS y/lat: 42.35815385. Region width in x: 20.0
1335386106330: location PINPOINTS to region = 2.0, previous 2
1335386106330: Hysteresis is 0.0
1335386106331: stay at region 2
1335386106696: old region empty, uploaded state to cloud in 1383ms as json 27356 bytes
1335386106696: VCoreDaemon.java inside stateTransition ..........
1335386106696: removing leaderRequestRetryR because I'm doing a stateTransition
1335386106696: ..... VCoreDaemon.java targetState = JOINING
1335386106702: posting leaderRequestRetryR because I'm joining
1335386106702: ..... VCoreDaemon.java stateTransition ends xxxxxxxxxxxx
1335386106703: sending LEADER_REQUEST
1335386106703: inside sendPacket(Packet p)
1335386106703: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386107004: sending LEADER_REQUEST
1335386107005: inside sendPacket(Packet p)
1335386107005: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386107306: sending LEADER_REQUEST
1335386107306: inside sendPacket(Packet p)
1335386107306: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386107607: sending LEADER_REQUEST
1335386107607: inside sendPacket(Packet p)
1335386107607: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386107703: inside leaderRequestTimeoutR beacuse I didn't hear a leader_reply and I'm removing leaderRequestRetryR because leader_request timed out
1335386107703: inside leaderRequestTimeoutR and my state was JOINING, so I'll try to stateTransition to LEADER
1335386107703: VCoreDaemon.java inside stateTransition ..........
1335386107704: removing leaderRequestRetryR because I'm doing a stateTransition
1335386107704: ..... VCoreDaemon.java targetState = LEADER
1335386107705: trying to take leadership to the cloud
1335386107812: cloud rejected leadership request or request failed, wait to retry
1335386108318: Loc = Location[mProvider=gps,mTime=1335386109000,mLatitude=42.3581653,mLongitude=-71.09290233,mHasAltitude=true,mAltitude=-23.799999237060547,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386108318: GPS x/long:-71.09290233, GPS y/lat: 42.3581653. Region width in x: 20.0
1335386108318: location PINPOINTS to region = 2.0, previous 2
1335386108319: Hysteresis is 0.0
1335386108319: stay at region 2
1335386109344: Loc = Location[mProvider=gps,mTime=1335386110000,mLatitude=42.35817655,mLongitude=-71.09290616,mHasAltitude=true,mAltitude=-23.799999237060547,mHasSpeed=true,mSpeed=0.75,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386109344: GPS x/long:-71.09290616, GPS y/lat: 42.35817655. Region width in x: 20.0
1335386109344: location PINPOINTS to region = 2.0, previous 2
1335386109344: Hysteresis is 0.0
1335386109344: stay at region 2
1335386111456: Loc = Location[mProvider=gps,mTime=1335386112000,mLatitude=42.35819297,mLongitude=-71.09291231,mHasAltitude=true,mAltitude=-24.299999237060547,mHasSpeed=true,mSpeed=0.75,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386111456: GPS x/long:-71.09291231, GPS y/lat: 42.35819297. Region width in x: 20.0
1335386111456: location PINPOINTS to region = 2.0, previous 2
1335386111457: Hysteresis is 0.0
1335386111457: stay at region 2
1335386112313: Loc = Location[mProvider=gps,mTime=1335386113000,mLatitude=42.35820232,mLongitude=-71.09291791,mHasAltitude=true,mAltitude=-24.600000381469727,mHasSpeed=true,mSpeed=0.75,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386112313: GPS x/long:-71.09291791, GPS y/lat: 42.35820232. Region width in x: 20.0
1335386112313: location PINPOINTS to region = 2.0, previous 2
1335386112314: Hysteresis is 0.0
1335386112314: stay at region 2
1335386114298: Loc = Location[mProvider=gps,mTime=1335386115000,mLatitude=42.35821641,mLongitude=-71.09291616,mHasAltitude=true,mAltitude=-24.0,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386114298: GPS x/long:-71.09291616, GPS y/lat: 42.35821641. Region width in x: 20.0
1335386114299: location PINPOINTS to region = 2.0, previous 2
1335386114299: Hysteresis is 0.0
1335386114299: stay at region 2
1335386116334: Loc = Location[mProvider=gps,mTime=1335386117000,mLatitude=42.35822623,mLongitude=-71.09291243,mHasAltitude=true,mAltitude=-24.299999237060547,mHasSpeed=true,mSpeed=0.25,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386116334: GPS x/long:-71.09291243, GPS y/lat: 42.35822623. Region width in x: 20.0
1335386116334: location PINPOINTS to region = 2.0, previous 2
1335386116335: Hysteresis is 0.0
1335386116335: stay at region 2
1335386120328: Loc = Location[mProvider=gps,mTime=1335386121000,mLatitude=42.35822735,mLongitude=-71.09289948,mHasAltitude=true,mAltitude=-24.200000762939453,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386120328: GPS x/long:-71.09289948, GPS y/lat: 42.35822735. Region width in x: 20.0
1335386120328: location PINPOINTS to region = 2.0, previous 2
1335386120328: Hysteresis is 0.0
1335386120329: stay at region 2
1335386124358: Loc = Location[mProvider=gps,mTime=1335386125000,mLatitude=42.35823014,mLongitude=-71.09291413,mHasAltitude=true,mAltitude=-24.200000762939453,mHasSpeed=true,mSpeed=0.25,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386124358: GPS x/long:-71.09291413, GPS y/lat: 42.35823014. Region width in x: 20.0
1335386124359: location PINPOINTS to region = 2.0, previous 2
1335386124359: Hysteresis is 0.0
1335386124359: stay at region 2
1335386126306: Loc = Location[mProvider=gps,mTime=1335386127000,mLatitude=42.35823203,mLongitude=-71.0929274,mHasAltitude=true,mAltitude=-23.799999237060547,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386126307: GPS x/long:-71.0929274, GPS y/lat: 42.35823203. Region width in x: 20.0
1335386126307: location PINPOINTS to region = 2.0, previous 2
1335386126307: Hysteresis is 0.0
1335386126308: stay at region 2
1335386133303: Loc = Location[mProvider=gps,mTime=1335386134000,mLatitude=42.35822188,mLongitude=-71.09292673,mHasAltitude=true,mAltitude=-24.299999237060547,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386133303: GPS x/long:-71.09292673, GPS y/lat: 42.35822188. Region width in x: 20.0
1335386133303: location PINPOINTS to region = 2.0, previous 2
1335386133304: Hysteresis is 0.0
1335386133304: stay at region 2
1335386135350: Loc = Location[mProvider=gps,mTime=1335386136000,mLatitude=42.35821181,mLongitude=-71.09292437,mHasAltitude=true,mAltitude=-24.0,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386135350: GPS x/long:-71.09292437, GPS y/lat: 42.35821181. Region width in x: 20.0
1335386135350: location PINPOINTS to region = 2.0, previous 2
1335386135350: Hysteresis is 0.0
1335386135350: stay at region 2
1335386141337: Loc = Location[mProvider=gps,mTime=1335386142000,mLatitude=42.35820245,mLongitude=-71.09292168,mHasAltitude=true,mAltitude=-23.5,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386141337: GPS x/long:-71.09292168, GPS y/lat: 42.35820245. Region width in x: 20.0
1335386141338: location PINPOINTS to region = 2.0, previous 2
1335386141338: Hysteresis is 0.0
1335386141338: stay at region 2
1335386145338: Loc = Location[mProvider=gps,mTime=1335386146000,mLatitude=42.35819537,mLongitude=-71.09291321,mHasAltitude=true,mAltitude=-23.700000762939453,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386145339: GPS x/long:-71.09291321, GPS y/lat: 42.35819537. Region width in x: 20.0
1335386145339: location PINPOINTS to region = 2.0, previous 2
1335386145339: Hysteresis is 0.0
1335386145339: stay at region 2
1335386153356: Loc = Location[mProvider=gps,mTime=1335386154000,mLatitude=42.3581863,mLongitude=-71.09290865,mHasAltitude=true,mAltitude=-23.899999618530273,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386153357: GPS x/long:-71.09290865, GPS y/lat: 42.3581863. Region width in x: 20.0
1335386153362: location PINPOINTS to region = 2.0, previous 2
1335386153363: Hysteresis is 0.0
1335386153363: stay at region 2
1335386155337: Loc = Location[mProvider=gps,mTime=1335386156000,mLatitude=42.35817239,mLongitude=-71.09290284,mHasAltitude=true,mAltitude=-24.200000762939453,mHasSpeed=true,mSpeed=0.75,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386155337: GPS x/long:-71.09290284, GPS y/lat: 42.35817239. Region width in x: 20.0
1335386155337: location PINPOINTS to region = 2.0, previous 2
1335386155337: Hysteresis is 0.0
1335386155337: stay at region 2
1335386156340: Loc = Location[mProvider=gps,mTime=1335386157000,mLatitude=42.35816318,mLongitude=-71.09289405,mHasAltitude=true,mAltitude=-24.5,mHasSpeed=true,mSpeed=0.75,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386156341: GPS x/long:-71.09289405, GPS y/lat: 42.35816318. Region width in x: 20.0
1335386156341: location PINPOINTS to region = 2.0, previous 2
1335386156341: Hysteresis is 0.0
1335386156341: stay at region 2
1335386157343: Loc = Location[mProvider=gps,mTime=1335386158000,mLatitude=42.35815463,mLongitude=-71.09288897,mHasAltitude=true,mAltitude=-24.299999237060547,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386157344: GPS x/long:-71.09288897, GPS y/lat: 42.35815463. Region width in x: 20.0
1335386157345: location PINPOINTS to region = 2.0, previous 2
1335386157345: Hysteresis is 0.0
1335386157346: stay at region 2
1335386158311: Loc = Location[mProvider=gps,mTime=1335386159000,mLatitude=42.35814523,mLongitude=-71.09288509,mHasAltitude=true,mAltitude=-24.399999618530273,mHasSpeed=true,mSpeed=0.75,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386158312: GPS x/long:-71.09288509, GPS y/lat: 42.35814523. Region width in x: 20.0
1335386158312: location PINPOINTS to region = 2.0, previous 2
1335386158312: Hysteresis is 0.0
1335386158312: stay at region 2
1335386160311: Loc = Location[mProvider=gps,mTime=1335386161000,mLatitude=42.35812955,mLongitude=-71.09288063,mHasAltitude=true,mAltitude=-24.799999237060547,mHasSpeed=true,mSpeed=0.5,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=4.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (2,0)
1335386160311: GPS x/long:-71.09288063, GPS y/lat: 42.35812955. Region width in x: 20.0
1335386160312: location PINPOINTS to region = 1.0, previous 2
1335386160312: Hysteresis is 0.0
1335386160312: location CHANGED TO NEW region = (1,0) from region = (2,0)
1335386160313: moving from region (2,0), to (1,0)
1335386160313: VCoreDaemon.java inside stateTransition ..........
1335386160313: removing leaderRequestRetryR because I'm doing a stateTransition
1335386160314: ..... VCoreDaemon.java targetState = JOINING
1335386160314: posting leaderRequestRetryR because I'm joining
1335386160315: sending LEADER_REQUEST
1335386160315: inside sendPacket(Packet p)
1335386160315: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386160316: ..... VCoreDaemon.java stateTransition ends xxxxxxxxxxxx
1335386160616: sending LEADER_REQUEST
1335386160616: inside sendPacket(Packet p)
1335386160617: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386160918: sending LEADER_REQUEST
1335386160919: inside sendPacket(Packet p)
1335386160919: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386161220: sending LEADER_REQUEST
1335386161221: inside sendPacket(Packet p)
1335386161222: posting another leaderRequestRetryR after leaderRequestRetryPeriod
1335386161316: inside leaderRequestTimeoutR beacuse I didn't hear a leader_reply and I'm removing leaderRequestRetryR because leader_request timed out
1335386161317: inside leaderRequestTimeoutR and my state was JOINING, so I'll try to stateTransition to LEADER
1335386161318: VCoreDaemon.java inside stateTransition ..........
1335386161318: removing leaderRequestRetryR because I'm doing a stateTransition
1335386161319: ..... VCoreDaemon.java targetState = LEADER
1335386161319: trying to take leadership to the cloud
1335386161445: cloud rejected leadership request or request failed, wait to retry
1335386162287: Loc = Location[mProvider=gps,mTime=1335386163000,mLatitude=42.3581155,mLongitude=-71.09287386,mHasAltitude=true,mAltitude=-22.899999618530273,mHasSpeed=true,mSpeed=0.25,mHasBearing=true,mBearing=191.2,mHasAccuracy=true,mAccuracy=5.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386162287: GPS x/long:-71.09287386, GPS y/lat: 42.3581155. Region width in x: 20.0
1335386162287: location PINPOINTS to region = 1.0, previous 1
1335386162287: Hysteresis is 0.0
1335386162288: stay at region 1
1335386163285: Loc = Location[mProvider=gps,mTime=1335386164000,mLatitude=42.35810899,mLongitude=-71.09286451,mHasAltitude=true,mAltitude=-23.200000762939453,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=5.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386163286: GPS x/long:-71.09286451, GPS y/lat: 42.35810899. Region width in x: 20.0
1335386163286: location PINPOINTS to region = 1.0, previous 1
1335386163286: Hysteresis is 0.0
1335386163286: stay at region 1
1335386166328: Loc = Location[mProvider=gps,mTime=1335386167000,mLatitude=42.35809861,mLongitude=-71.09284745,mHasAltitude=true,mAltitude=-21.899999618530273,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=5.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386166329: GPS x/long:-71.09284745, GPS y/lat: 42.35809861. Region width in x: 20.0
1335386166329: location PINPOINTS to region = 1.0, previous 1
1335386166329: Hysteresis is 0.0
1335386166329: stay at region 1
1335386168342: Loc = Location[mProvider=gps,mTime=1335386169000,mLatitude=42.35808926,mLongitude=-71.09284085,mHasAltitude=true,mAltitude=-20.799999237060547,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=6.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386168342: GPS x/long:-71.09284085, GPS y/lat: 42.35808926. Region width in x: 20.0
1335386168343: location PINPOINTS to region = 1.0, previous 1
1335386168343: Hysteresis is 0.0
1335386168343: stay at region 1
1335386170312: Loc = Location[mProvider=gps,mTime=1335386171000,mLatitude=42.35807723,mLongitude=-71.09283632,mHasAltitude=true,mAltitude=-19.399999618530273,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=6.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386170312: GPS x/long:-71.09283632, GPS y/lat: 42.35807723. Region width in x: 20.0
1335386170313: location PINPOINTS to region = 1.0, previous 1
1335386170313: Hysteresis is 0.0
1335386170313: stay at region 1
1335386190185: Received UDP payload: 446
1335386190202: Sending UDP payload: 446
1335386190210: Received UDP payload: 6139
1335386190324: mux: Inside mux Packet.CLIENT_REQUEST
1335386190248: Received UDP payload: 446
1335386190250: Received UDP payload: 446
1335386190256: Received UDP payload: 446
1335386190257: Received UDP payload: 446
1335386190260: Sending UDP payload: 446
1335386190262: Sending UDP payload: 463
1335386190279: Sending UDP payload: 446
1335386190281: Sending UDP payload: 446
1335386190282: Sending UDP payload: 446
1335386190283: Sending UDP payload: 446
1335386190288: Sending UDP payload: 446
1335386190289: Sending UDP payload: 446
1335386190293: Received UDP payload: 446
1335386190314: Sending UDP payload: 446
1335386190315: Sending UDP payload: 446
1335386190318: Received UDP payload: 446
1335386190319: Received UDP payload: 446
1335386190321: Received UDP payload: 446
1335386190322: Received UDP payload: 446
1335386190324: Received UDP payload: 446
1335386190339: Received UDP payload: 446
1335386190348: Received UDP payload: 446
1335386190351: Received UDP payload: 446
1335386190353: Received UDP payload: 625
1335386190355: mux: Inside mux Packet.CLIENT_REQUEST
1335386190356: Received UDP payload: 625
1335386190357: mux: Inside mux Packet.CLIENT_REQUEST
1335386190358: Received UDP payload: 625
1335386190360: mux: Inside mux Packet.CLIENT_REQUEST
1335386190360: Received UDP payload: 446
1335386190362: Received UDP payload: 446
1335386190364: Received UDP payload: 446
1335386190366: Received UDP payload: 625
1335386190368: mux: Inside mux Packet.CLIENT_REQUEST
1335386190368: Received UDP payload: 625
1335386190370: mux: Inside mux Packet.CLIENT_REQUEST
1335386190370: Received UDP payload: 625
1335386190372: mux: Inside mux Packet.CLIENT_REQUEST
1335386190373: Received UDP payload: 625
1335386190398: mux: Inside mux Packet.CLIENT_REQUEST
1335386190398: Received UDP payload: 446
1335386190401: Received UDP payload: 446
1335386190403: Received UDP payload: 446
1335386190418: Received UDP payload: 23716
1335386190421: Received UDP payload: 446
1335386190423: Received UDP payload: 446
1335386190434: Received UDP payload: 446
1335386190436: Received UDP payload: 446
1335386190437: Received UDP payload: 446
1335386190439: Received UDP payload: 446
1335386190447: Received UDP payload: 446
1335386190449: Received UDP payload: 23037
1335386190451: Received UDP payload: 23037
1335386190454: Received UDP payload: 446
1335386190455: Received UDP payload: 446
1335386190457: Received UDP payload: 446
1335386190459: Received UDP payload: 446
1335386190460: Received UDP payload: 3951
1335386190463: mux: Inside mux Packet.CLIENT_REQUEST
1335386190463: Received UDP payload: 3951
1335386190486: mux: Inside mux Packet.CLIENT_REQUEST
1335386190486: Received UDP payload: 3951
1335386190489: mux: Inside mux Packet.CLIENT_REQUEST
1335386190489: Received UDP payload: 19754
1335386190496: removing leaderRequestRetryR because heard Packet.Leader_reply
1335386190496: heard LEADER_REPLY from 5012
1335386190496: VCoreDaemon.java inside stateTransition ..........
1335386190496: removing leaderRequestRetryR because I'm doing a stateTransition
1335386190496: ..... VCoreDaemon.java targetState = NONLEADER
1335386190497: DSMLayer stopped
1335386190497: now NONLEADER (id=5003) following LEADER (id=5012) in (1,0)
1335386190497: ..... VCoreDaemon.java stateTransition ends xxxxxxxxxxxx
1335386190497: Received UDP payload: 446
1335386190500: Received UDP payload: 446
1335386190502: Received UDP payload: 463
1335386190504: Received UDP payload: 446
1335386190511: Received UDP payload: 989
1335386190526: mux: GOT CSM_Msg
1335386190527: Received UDP payload: 19771
1335386190535: Received UDP payload: 446
1335386190537: Received UDP payload: 446
1335386190539: Received UDP payload: 446
1335386190541: Received UDP payload: 446
1335386190543: Received UDP payload: 446
1335386190556: Received UDP payload: 446
1335386190559: Received UDP payload: 463
1335386190561: heard LEADER_ELECT from node 5011, responding LEADER_NOMINATE
1335386190561: inside sendPacket(Packet p)
1335386190562: Sending UDP payload: 446
1335386190562: Received UDP payload: 446
1335386190568: Received UDP payload: 446
1335386190570: Received UDP payload: 446
1335386190572: Received UDP payload: 446
1335386190575: Received UDP payload: 446
1335386190577: Received UDP payload: 446
1335386190579: Received UDP payload: 446
1335386190581: Received UDP payload: 446
1335386190583: Received UDP payload: 446
1335386190586: Received UDP payload: 446
1335386190587: Received UDP payload: 446
1335386190589: Received UDP payload: 446
1335386190591: Received UDP payload: 446
1335386190594: Received UDP payload: 446
1335386190596: Received UDP payload: 446
1335386190598: Received UDP payload: 446
1335386190600: Received UDP payload: 446
1335386190603: Received UDP payload: 446
1335386190605: Received UDP payload: 446
1335386190608: Received UDP payload: 446
1335386190610: Received UDP payload: 446
1335386190613: Received UDP payload: 446
1335386190615: Received UDP payload: 446
1335386190617: Received UDP payload: 446
1335386190619: Received UDP payload: 446
1335386190622: Received UDP payload: 446
1335386190624: Received UDP payload: 446
1335386190626: Received UDP payload: 446
1335386190627: Received UDP payload: 446
1335386190630: Received UDP payload: 446
1335386190632: Received UDP payload: 446
1335386190635: Received UDP payload: 446
1335386190637: Received UDP payload: 446
1335386190639: Received UDP payload: 446
1335386192327: .......... GPS onLocationChanged ...... 
1335386192328: Loc = Location[mProvider=gps,mTime=1335386193000,mLatitude=42.35807406,mLongitude=-71.09282489,mHasAltitude=true,mAltitude=-18.600000381469727,mHasSpeed=true,mSpeed=0.0,mHasBearing=false,mBearing=0.0,mHasAccuracy=true,mAccuracy=6.0,mExtras=Bundle[mParcelledData.dataSize=4]] Previous Region = (1,0)
1335386192328: GPS x/long:-71.09282489, GPS y/lat: 42.35807406. Region width in x: 20.0
1335386192328: location PINPOINTS to region = 1.0, previous 1
1335386192329: Hysteresis is 0.0
1335386192329: stay at region 1
1335386192927: Received UDP payload: 446
1335386192935: inside LEADER_NOMINATE mState = 3 vnp.dstRegion = (1,0) leaderRegion = (-1,-1)
1335386193176: Received UDP payload: 446
1335386193613: Received UDP payload: 446
1335386193708: Received UDP payload: 446
1335386194010: Received UDP payload: 446
1335386199564: Received UDP payload: 446
1335386199798: Received UDP payload: 446
1335386199806: Received UDP payload: 446
1335386199852: Received UDP payload: 3512
1335386199857: ignoring leader_reply that's not for me
1335386199870: Received UDP payload: 446
1335386199876: Received UDP payload: 446
1335386199892: Received UDP payload: 463
1335386199908: Received UDP payload: 446
1335386199985: Received UDP payload: 446
1335386200253: Received UDP payload: 446
1335386206907: HI I'm in ONPAUSE()
1335386207623: inside onDestroy()
